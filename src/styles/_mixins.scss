@import "vars";

// Media Queries
@mixin xsmScreenMedia {
  @media (max-width: $xsm-screen) {
    @content;
  }
}

@mixin smScreenMedia {
  @media (max-width: $sm-screen) {
    @content;
  }
}

@mixin mdScreenMedia {
  @media (max-width: $md-screen) {
    @content;
  }
}

@mixin lgScreenMedia {
  @media (max-width: $lg-screen) {
    @content;
  }
}

@mixin xlScreenMedia {
  @media (max-width: $xl-screen) {
    @content;
  }
}

@mixin xxlScreenMedia {
  @media (max-width: $xxl-screen) {
    @content;
  }
}

// Font Sizes Map
$font-sizes: (
  xsm: (
    default: $font-xsm,
    xxl: $font-xsm,
    xl: $font-xsm,
    lg: $font-xsm,
    md: $font-xsm,
    sm: $font-xxsm,
    xsm: $font-xxsm,
  ),
  sm: (
    default: $font-sm,
    xxl: $font-sm,
    xl: $font-sm,
    lg: $font-sm,
    md: $font-xsm,
    sm: $font-xsm,
    xsm: $font-xsm,
  ),
  base: (
    default: $font-base,
    xxl: $font-base,
    xl: $font-base,
    lg: $font-base,
    md: $font-sm,
    sm: $font-xsm,
    xsm: $font-xsm,
  ),
  md: (
    default: $font-md,
    xxl: $font-md,
    xl: $font-md,
    lg: $font-base,
    md: $font-base,
    sm: $font-sm,
    xsm: $font-xsm,
  ),
  lg: (
    default: $font-lg,
    xxl: $font-lg,
    xl: $font-lg,
    lg: $font-md,
    md: $font-md,
    sm: $font-base,
    xsm: $font-sm,
  ),
  xl: (
    default: $font-xl,
    xxl: $font-xl,
    xl: $font-lg,
    lg: $font-lg,
    md: $font-md,
    sm: $font-base,
    xsm: $font-sm,
  ),
  xxl: (
    default: $font-xxl,
    xxl: $font-xl,
    xl: $font-xl,
    lg: $font-lg,
    md: $font-lg,
    sm: $font-md,
    xsm: $font-base,
  ),
);

// Universal setFont Mixin
@mixin setFont(
  $size-key-or-value,
  $weight,
  $color: $color-secondary,
  $line-height: normal,
  $useMedia: true
) {
  // Если передан ключ из карты
  @if type-of($size-key-or-value) == string {
    $size-map: map-get($font-sizes, $size-key-or-value);

    @if $size-map == null {
      @error "Error in setFont: `#{$size-key-or-value}` is not a valid font size key.";
    }

    font-size: map-get($size-map, default);

    @if $useMedia {
      @include xxlScreenMedia {
        font-size: map-get($size-map, xxl);
      }
      @include xlScreenMedia {
        font-size: map-get($size-map, xl);
      }
      @include lgScreenMedia {
        font-size: map-get($size-map, lg);
      }
      @include mdScreenMedia {
        font-size: map-get($size-map, md);
      }
      @include smScreenMedia {
        font-size: map-get($size-map, sm);
      }
      @include xsmScreenMedia {
        font-size: map-get($size-map, xsm);
      }
    }
  }
  // Если передан кастомный размер
  @else {
    font-size: $size-key-or-value;
  }

  font-weight: $weight;
  color: $color;
  line-height: $line-height;
}

// Icons & SVG
@mixin icon($width, $height: $width) {
  width: $width;
  height: $height;
  object-fit: contain;
}

@mixin svg($width, $color: transparent, $height: $width, $stroke: none) {
  width: $width;
  height: $height;
  fill: $color;
  stroke: $stroke;
}

// Buttons
@mixin button($bg: transparent, $border: none) {
  border: $border;
  background: $bg;
  cursor: pointer;
}

// Flex Layouts
@mixin flexCol($layout: center, $align: center) {
  display: flex;
  justify-content: $layout;
  align-items: $align;
}

// Background WebP Support
@mixin bgWebp($src, $srcSet) {
  background-image: url($src); // fallback

  @supports (background-image: url($srcSet)) {
    background-image: url($srcSet);
  }
}
