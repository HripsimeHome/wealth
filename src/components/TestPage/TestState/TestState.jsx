import styles from "./TestState.module.scss";
import { useState, useEffect } from "react";

const TestState = () => {
  const [count, setCount] = useState(0);
  const [incrementCount, setIncrementCount] = useState(0);
  const [decrementCount, setDecrementCount] = useState(0);

  const [delayCount, setDelayCount] = useState(0);

  /* –û–¥–∏–Ω —Å—á—ë—Ç—á–∏–∫ */
  const increment = () => setCount((prev) => prev + 1);
  const decrement = () => setCount((prev) => prev - 1);
  const reset = () => setCount(0);
  const iccrementByFive = () => setCount((prev) => prev + 5);

  /* –î–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—á—ë—Ç—á–∏–∫–∞. */
  const incCount = () => setIncrementCount((prev) => prev + 1);
  const decCount = () => setDecrementCount((prev) => prev - 1);

  // –î–≤–∞ —Å—á—ë—Ç—á–∏–∫–∞ (increment –∏ decrement)  –≤ –æ–¥–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ:

  const [counters, setCounters] = useState({ increment: 0, decrement: 0 });

  const handleIncrement = () => {
    setCounters((prev) => ({
      ...prev,
      increment: prev.increment + 1,
    }));
  };

  const handleDecrement = () => {
    setCounters((prev) => ({
      ...prev,
      decrement: prev.decrement - 1,
    }));
  };

  // setUser(prev => ({
  //   ...prev,
  //   age: 26,
  // }));

  /* Stale closure - –∑–∞–º—ã–∫–∞–Ω–∏–µ */

  // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± (stale closure)
  // const incrementAsyncWrong = () => {
  //   setTimeout(() => {
  //     setCount(count + 1); // count –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –Ω–∞ –º–æ–º–µ–Ω—Ç –∫–ª–∏–∫–∞
  //     console.log("Wrong count:", count + 1);
  //   }, 1000);
  // };

  // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± (stale closure)

  const handleDelayIncrement = () => {
    setTimeout(() => {
      setDelayCount((prev) => prev + 1);
    }, 2000);
  };
  // ---------------------------------------
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä setInterval(() —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π
  // useEffect(() => {
  //   const intervalId = setInterval(() => {
  //     console.log("–¢–∏–∫ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã");
  //   }, 2000);
  //   return () => clearInterval(intervalId);
  // }, []);

  //  –ü—Ä–∏–º–µ—Ä: –∑–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥

  // ---------------------------------------

  // –ü—Ä–∏–º–µ—Ä –±–µ–∑ useState (—Ç–æ–ª—å–∫–æ console.log):
  useEffect(() => {
    // 1. –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å id –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    let count = 0; // –æ–±—ã—á–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (–Ω–µ useState),

    // 2. –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    const intervalId = setInterval(() => {
      count++;
      console.log("–°—á–µ—Ç:", count);

      // 3. –£—Å–ª–æ–≤–∏–µ ‚Äî –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 5 —Å–µ–∫—É–Ω–¥ (counter === 5)
      if (count === 5) {
        clearInterval(intervalId); // 4. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª - –ø–æ –ª–æ–≥–∏–∫–µ –∑–∞–¥–∞—á–∏ (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ —É—Å–ª–æ–≤–∏—é).
        console.log("–°—á–µ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
      }
    }, 2000); // 1000 –º—Å = 1 —Å–µ–∫—É–Ω–¥–∞
    return () => clearInterval(intervalId); // —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞, —á—Ç–æ–±—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ ¬´–≤–∏—Å–µ–ª¬ª –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–π–¥—ë—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
  }, []);

  // ---------------------------------------
  //–¢–æ—Ç –∂–µ –ø—Ä–∏–º–µ—Ä, –Ω–æ —Å useEffect() - –∑–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥

  const [number, setNumber] = useState(0);
  const [status, setStatus] = useState("–°—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è ...");

  useEffect(() => {
    const numberCounter = setInterval(() => {
      setNumber((prev) => {
        if (prev === 5) {
          clearInterval(numberCounter);
          setStatus("–°—á–µ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è");
          return prev;
        }
        return prev + 1;
      });
    }, 150);

    return () => clearInterval(numberCounter);
  }, []);

  // ---------------------------------------

  // –ü—Ä–∏–º–µ—Ä:–¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞ (Countdown)
  // const [timer, setTimer] = useState(10);
  // useEffect(() => {
  //   const timerId = setInterval(() => {
  //     setTimer((prev) => {
  //       if (prev === 0) {
  //         clearInterval(timerId);
  //         return prev;
  //       }
  //       return prev - 1;
  //     });
  //   }, 1000);

  //   return () => clearInterval(timerId);
  // }, []);

  // ---------------------------------------

  // –ü—Ä–∏–º–µ—Ä: –ú–æ—Ä–≥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ (–∞–Ω–∏–º–∞—Ü–∏—è –±–µ–∑ CSS)
  // –ó–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –ø–æ —É—Å–ª–æ–≤–∏—é (if (...) { clearInterval(...)
  //–ü–æ—ç—Ç–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—â–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ cleanup-—Ñ—É–Ω–∫—Ü–∏–∏ return () => clearInterval(id).

  // const [visible, setVisible] = useState(true);

  // useEffect(() => {
  //   const id = setInterval(() => {
  //     setVisible((prev) => !prev);
  //   }, 500);

  //   return () => clearInterval(id);
  // }, []);

  return (
    <section className={`${styles.testState} container paddingYLg`}>
      {/* –î–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—á—ë—Ç—á–∏–∫–∞. */}
      <div className={styles.testState__blockContainer}>
        <p>–î–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—á—ë—Ç—á–∏–∫–∞.</p>
        <div>
          <button className="btnPrimary" onClick={incCount}>
            Increment + 1
          </button>
          <p>Current count: {incrementCount}</p>
        </div>
        <div>
          <button className="btnPrimary" onClick={decCount}>
            Decrement - 1
          </button>
          <p>Current count: {decrementCount}</p>
        </div>
      </div>
      <br />
      {/* –û–¥–∏–Ω —Å—á—ë—Ç—á–∏–∫ */}
      <div className={styles.testState__blockContainer}>
        <p>–û–¥–∏–Ω —Å—á—ë—Ç—á–∏–∫. {count}</p>

        <button className="btnPrimary" onClick={increment}>
          Increment + 1
        </button>

        <button className="btnPrimary" onClick={decrement}>
          Increment - 1
        </button>

        <button className="btnPrimary" onClick={reset}>
          Reset
        </button>

        <button className="btnPrimary" onClick={iccrementByFive}>
          Increment + 5
        </button>
      </div>
      {/* –ó–∞–º—ã–∫–∞–Ω–∏–µ State closure */}
      <div className={styles.testState__blockContainer}>
        <p>–û–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã: {delayCount} </p>
        <button className="btnPrimary" onClick={handleDelayIncrement}>
          Delay + 1
        </button>
      </div>
      <br />
      <br />
      <h2>Counter example with Spread operator</h2>
      {/* –î–≤–∞ —Å—á—ë—Ç—á–∏–∫–∞ (increment –∏ decrement)  –≤ –æ–¥–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ: */}
      <div className={styles.testState__blockContainer}>
        <p>Current count: {counters.increment}</p>
        <button className="btnPrimary" onClick={handleIncrement}>
          Increment + 1
        </button>

        <p>Current count: {counters.decrement}</p>
        <button className="btnPrimary" onClick={handleDecrement}>
          Decrement - 1
        </button>
      </div>
      <br />
      <br />
      <h2>SetInterval example - —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏</h2>
      <p>Number: {number}</p>
      <p>Status: {status}</p>
      <br />
      <br />
      <p>{/* –û—Å—Ç–∞–ª–æ—Å—å <strong>{timer} </strong>—Å–µ–∫—É–Ω–¥ */}</p>
      <br />
      {/* <h2>{visible ? "üëÄ –Ø –º–∏–≥–∞—é" : ""}</h2> */}
    </section>
  );
};

export default TestState;
